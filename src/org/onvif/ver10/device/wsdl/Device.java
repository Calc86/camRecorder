package org.onvif.ver10.device.wsdl;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.0.0
 * 2014-07-10T16:45:09.675+04:00
 * Generated source version: 3.0.0
 * 
 */
@WebService(targetNamespace = "http://www.onvif.org/ver10/device/wsdl", name = "Device")
@XmlSeeAlso({org.xmlsoap.schemas.soap.envelope.ObjectFactory.class, org.w3._2005._05.xmlmime.ObjectFactory.class, org.w3._2004._08.xop.include.ObjectFactory.class, org.onvif.ver10.schema.ObjectFactory.class, org.oasis_open.docs.wsn.t_1.ObjectFactory.class, ObjectFactory.class, org.oasis_open.docs.wsrf.bf_2.ObjectFactory.class, org.oasis_open.docs.wsn.b_2.ObjectFactory.class})
public interface Device {

    /**
     * This operation sets the settings of a relay output.
     * 				This method has been depricated with version 2.0. Refer to the DeviceIO service.
     */
    @RequestWrapper(localName = "SetRelayOutputSettings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettings")
    @WebMethod(operationName = "SetRelayOutputSettings", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings")
    @ResponseWrapper(localName = "SetRelayOutputSettingsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputSettingsResponse")
    public void setRelayOutputSettings(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String relayOutputToken,
        @WebParam(name = "Properties", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.RelayOutputSettings properties
    );

    /**
     * This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration is supported or not.
     */
    @RequestWrapper(localName = "SetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfiguration")
    @WebMethod(operationName = "SetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration")
    @ResponseWrapper(localName = "SetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetZeroConfigurationResponse")
    public void setZeroConfiguration(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String interfaceToken,
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled
    );

    /**
     * This operation reloads the parameters on the device to their factory default values.
     */
    @RequestWrapper(localName = "SetSystemFactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefault")
    @WebMethod(operationName = "SetSystemFactoryDefault", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault")
    @ResponseWrapper(localName = "SetSystemFactoryDefaultResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemFactoryDefaultResponse")
    public void setSystemFactoryDefault(
        @WebParam(name = "FactoryDefault", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.FactoryDefaultType factoryDefault
    );

    /**
     * This operation gets the NTP settings from a device. If the device supports NTP, it shall be
     * 				possible to get the NTP server settings through the GetNTP command.
     */
    @WebResult(name = "NTPInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTP")
    @WebMethod(operationName = "GetNTP", action = "http://www.onvif.org/ver10/device/wsdl/GetNTP")
    @ResponseWrapper(localName = "GetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNTPResponse")
    public org.onvif.ver10.schema.NTPInformation getNTP();

    /**
     * CA certificates will be loaded into a device and be used for the sake of following two cases.
     * 				The one is for the purpose of TLS client authentication in TLS server function. The other one
     * 				is for the purpose of Authentication Server authentication in IEEE 802.1X function. This
     * 				operation gets all CA certificates loaded into a device. A device that supports either TLS client
     * 				authentication or IEEE 802.1X shall support this command and the returned certificates shall
     * 				be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding rules.
     */
    @WebResult(name = "CACertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificates")
    @WebMethod(operationName = "GetCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCACertificates")
    @ResponseWrapper(localName = "GetCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCACertificatesResponse")
    public java.util.List<org.onvif.ver10.schema.Certificate> getCACertificates();

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     */
    @WebResult(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateMode")
    @WebMethod(operationName = "GetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode")
    @ResponseWrapper(localName = "GetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetClientCertificateModeResponse")
    public boolean getClientCertificateMode();

    /**
     * This operation gets the dynamic DNS settings from a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to get the type, name
     * 				and TTL through the GetDynamicDNS command.
     */
    @WebResult(name = "DynamicDNSInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNS")
    @WebMethod(operationName = "GetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS")
    @ResponseWrapper(localName = "GetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDynamicDNSResponse")
    public org.onvif.ver10.schema.DynamicDNSInformation getDynamicDNS();

    /**
     * This operation sets the default gateway settings on a device. The device shall support
     * 				configuration of default gateway through the SetNetworkDefaultGateway command.
     */
    @RequestWrapper(localName = "SetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGateway")
    @WebMethod(operationName = "SetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway")
    @ResponseWrapper(localName = "SetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkDefaultGatewayResponse")
    public void setNetworkDefaultGateway(
        @WebParam(name = "IPv4Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> iPv4Address,
        @WebParam(name = "IPv6Address", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> iPv6Address
    );

    /**
     * This operation is specific to TLS functionality. This operation gets the status
     * 				(enabled/disabled) of the device TLS server certificates. A device that supports TLS shall
     * 				support this command.
     */
    @WebResult(name = "CertificateStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatus")
    @WebMethod(operationName = "GetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus")
    @ResponseWrapper(localName = "GetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesStatusResponse")
    public java.util.List<org.onvif.ver10.schema.CertificateStatus> getCertificatesStatus();

    /**
     * Manage auxiliary commands supported by a device, such as controlling an Infrared (IR) lamp, 
     * 				a heater or a wiper or a thermometer that is connected to the device.
     * 				The supported commands can be retrieved via the AuxiliaryCommands capability.
     * 				Although the name of the auxiliary commands can be freely defined, commands starting with the prefix tt: are 
     * 				reserved to define frequently used commands and these reserved commands shall all share the "tt:command|parameter" syntax.
     * 				
     * 				A device that indicates auxiliary service capability shall support this command.
     */
    @WebResult(name = "AuxiliaryCommandResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SendAuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommand")
    @WebMethod(operationName = "SendAuxiliaryCommand", action = "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand")
    @ResponseWrapper(localName = "SendAuxiliaryCommandResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SendAuxiliaryCommandResponse")
    public java.lang.String sendAuxiliaryCommand(
        @WebParam(name = "AuxiliaryCommand", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String auxiliaryCommand
    );

    /**
     * Any endpoint can ask for the capabilities of a device using the capability exchange request
     * 				response operation. The device shall indicate all its ONVIF compliant capabilities through the
     * 				GetCapabilities command.
     * 				The capability list includes references to the addresses (XAddr) of the service implementing
     * 				the interface operations in the category. Apart from the addresses, the
     * 				capabilities only reflect optional functions.
     */
    @WebResult(name = "Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilities")
    @WebMethod(operationName = "GetCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetCapabilities")
    @ResponseWrapper(localName = "GetCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCapabilitiesResponse")
    public org.onvif.ver10.schema.Capabilities getCapabilities(
        @WebParam(name = "Category", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.CapabilityCategory> category
    );

    /**
     * This operation configures defined network protocols on a device. The device shall support
     * 				configuration of defined network protocols through the SetNetworkProtocols command.
     */
    @RequestWrapper(localName = "SetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocols")
    @WebMethod(operationName = "SetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols")
    @ResponseWrapper(localName = "SetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkProtocolsResponse")
    public void setNetworkProtocols(
        @WebParam(name = "NetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.NetworkProtocol> networkProtocols
    );

    /**
     * This operation gets the default gateway settings from a device. The device shall support the
     * 				GetNetworkDefaultGateway command returning configured default gateway address(es).
     */
    @WebResult(name = "NetworkGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNetworkDefaultGateway", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGateway")
    @WebMethod(operationName = "GetNetworkDefaultGateway", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway")
    @ResponseWrapper(localName = "GetNetworkDefaultGatewayResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkDefaultGatewayResponse")
    public org.onvif.ver10.schema.NetworkGateway getNetworkDefaultGateway();

    /**
     * This operation deletes a certificate or multiple certificates. The device MAY also delete a
     * 				private/public key pair which is coupled with the certificate to be deleted. The device that
     * 				support either TLS or IEEE 802.1X shall support the deletion of a certificate or multiple
     * 				certificates through this command. Either all certificates are deleted successfully or a fault
     * 				message shall be returned without deleting any certificate.
     */
    @RequestWrapper(localName = "DeleteCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificates")
    @WebMethod(operationName = "DeleteCertificates", action = "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates")
    @ResponseWrapper(localName = "DeleteCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteCertificatesResponse")
    public void deleteCertificates(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> certificateID
    );

    /**
     * This operation sets the remote DP address or addresses on a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support configuration of the
     * 				remote DP address(es) through the SetDPAddresses command.
     */
    @RequestWrapper(localName = "SetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddresses")
    @WebMethod(operationName = "SetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses")
    @ResponseWrapper(localName = "SetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDPAddressesResponse")
    public void setDPAddresses(
        @WebParam(name = "DPAddress", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.NetworkHost> dpAddress
    );

    /**
     * This operation gets the IP address filter settings from a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support the GetIPAddressFilter command.
     */
    @WebResult(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilter")
    @WebMethod(operationName = "GetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter")
    @ResponseWrapper(localName = "GetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetIPAddressFilterResponse")
    public org.onvif.ver10.schema.IPAddressFilter getIPAddressFilter();

    /**
     * This operation sets the DNS settings on a device. It shall be possible to set the device DNS
     * 				configurations through the SetDNS command.
     */
    @RequestWrapper(localName = "SetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNS")
    @WebMethod(operationName = "SetDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDNS")
    @ResponseWrapper(localName = "SetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDNSResponse")
    public void setDNS(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "SearchDomain", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> searchDomain,
        @WebParam(name = "DNSManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.IPAddress> dnsManual
    );

    /**
     * This operation is specific to TLS functionality. This operation sets the status
     * 				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
     * 				support this command.
     */
    @RequestWrapper(localName = "SetClientCertificateMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateMode")
    @WebMethod(operationName = "SetClientCertificateMode", action = "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode")
    @ResponseWrapper(localName = "SetClientCertificateModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetClientCertificateModeResponse")
    public void setClientCertificateMode(
        @WebParam(name = "Enabled", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean enabled
    );

    /**
     * This operation deletes scope-configurable scope parameters from a device. The scope
     * 				parameters are used in the device discovery to match a probe message, see Section 7. The
     * 				device shall support deletion of discovery scope parameters through the RemoveScopes
     * 				command.
     * 				Table
     */
    @RequestWrapper(localName = "RemoveScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopes")
    @WebMethod(operationName = "RemoveScopes", action = "http://www.onvif.org/ver10/device/wsdl/RemoveScopes")
    @ResponseWrapper(localName = "RemoveScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveScopesResponse")
    public void removeScopes(
        @WebParam(mode = WebParam.Mode.INOUT, name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.util.List<java.lang.String>> scopeItem
    );

    /**
     * Returns information about services on the device.
     */
    @WebResult(name = "Service", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetServices", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServices")
    @WebMethod(operationName = "GetServices", action = "http://www.onvif.org/ver10/device/wsdl/GetServices")
    @ResponseWrapper(localName = "GetServicesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServicesResponse")
    public java.util.List<org.onvif.ver10.device.wsdl.Service> getServices(
        @WebParam(name = "IncludeCapability", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean includeCapability
    );

    /**
     * This operation returns a lists of the wireless networks in range of the device. A device should
     * 				support this operation.
     */
    @WebResult(name = "Networks", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "ScanAvailableDot11Networks", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11Networks")
    @WebMethod(operationName = "ScanAvailableDot11Networks", action = "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks")
    @ResponseWrapper(localName = "ScanAvailableDot11NetworksResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.ScanAvailableDot11NetworksResponse")
    public java.util.List<org.onvif.ver10.schema.Dot11AvailableNetworks> scanAvailableDot11Networks(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String interfaceToken
    );

    /**
     * This operation sets the IP address filter settings on a device. If the device supports device
     * 				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
     * 				device shall support configuration of IP filtering rules through the SetIPAddressFilter
     * 				command.
     */
    @RequestWrapper(localName = "SetIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilter")
    @WebMethod(operationName = "SetIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter")
    @ResponseWrapper(localName = "SetIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetIPAddressFilterResponse")
    public void setIPAddressFilter(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.IPAddressFilter ipAddressFilter
    );

    /**
     * This operation gets the device system date and time. The device shall support the return of
     * 				the daylight saving setting and of the manual system date and time (if applicable) or indication
     * 				of NTP time (if applicable) through the GetSystemDateAndTime command.
     * 				A device shall provide the UTCDateTime information.
     */
    @WebResult(name = "SystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTime")
    @WebMethod(operationName = "GetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime")
    @ResponseWrapper(localName = "GetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemDateAndTimeResponse")
    public org.onvif.ver10.schema.SystemDateTime getSystemDateAndTime();

    /**
     * This operation returns the IEEE802.11 capabilities. The device shall support
     * 				this operation.
     */
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @WebResult(name = "GetDot11CapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
    @WebMethod(operationName = "GetDot11Capabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities")
    public GetDot11CapabilitiesResponse getDot11Capabilities(
        @WebParam(partName = "parameters", name = "GetDot11Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        GetDot11Capabilities parameters
    );

    /**
     * This operation is used to retrieve URIs from which system information may be downloaded
     * 				using HTTP. URIs may be returned for the following system information:
     * 				System Logs. Multiple system logs may be returned, of different types. The exact format of
     * 				the system logs is outside the scope of this specification.
     * 				Support Information. This consists of arbitrary device diagnostics information from a device.
     * 				The exact format of the diagnostic information is outside the scope of this specification.
     * 				System Backup. The received file is a backup file that can be used to restore the current
     * 				device configuration at a later date. The exact format of the backup configuration file is
     * 				outside the scope of this specification.
     * 				If the device allows retrieval of system logs, support information or system backup data, it
     * 				should make them available via HTTP GET. If it does, it shall support the GetSystemUris
     * 				command.
     */
    @RequestWrapper(localName = "GetSystemUris", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUris")
    @WebMethod(operationName = "GetSystemUris", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemUris")
    @ResponseWrapper(localName = "GetSystemUrisResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemUrisResponse")
    public void getSystemUris(
        @WebParam(mode = WebParam.Mode.OUT, name = "SystemLogUris", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<org.onvif.ver10.schema.SystemLogUriList> systemLogUris,
        @WebParam(mode = WebParam.Mode.OUT, name = "SupportInfoUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> supportInfoUri,
        @WebParam(mode = WebParam.Mode.OUT, name = "SystemBackupUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> systemBackupUri,
        @WebParam(mode = WebParam.Mode.OUT, name = "Extension", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<org.onvif.ver10.device.wsdl.GetSystemUrisResponse.Extension> extension
    );

    /**
     * This operation initiates a system restore from backed up configuration data using the HTTP
     * 				POST mechanism. The response to the command includes an HTTP URL to which the backup
     * 				file may be uploaded. The actual restore takes place as soon as the HTTP POST operation
     * 				has completed. Devices should support system restore through the StartSystemRestore
     * 				command. The exact format of the backup configuration data is outside the scope of this
     * 				specification.
     * 				System restore over HTTP may be achieved using the following steps:
     * 				If the system restore fails because the uploaded file was invalid, the HTTP POST response
     * 				shall be “415 Unsupported Media Type”. If the system restore fails due to an error at the
     * 				device, the HTTP POST response shall be “500 Internal Server Error”.
     * 				The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”.
     */
    @RequestWrapper(localName = "StartSystemRestore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestore")
    @WebMethod(operationName = "StartSystemRestore", action = "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore")
    @ResponseWrapper(localName = "StartSystemRestoreResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartSystemRestoreResponse")
    public void startSystemRestore(
        @WebParam(mode = WebParam.Mode.OUT, name = "UploadUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> uploadUri,
        @WebParam(mode = WebParam.Mode.OUT, name = "ExpectedDownTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<javax.xml.datatype.Duration> expectedDownTime
    );

    /**
     * This operation generates a private/public key pair and also can create a self-signed device
     * 				certificate as a result of key pair generation. The certificate is created using a suitable
     * 				onboard key pair generation mechanism.
     * 				If a device supports onboard key pair generation, the device that supports TLS shall support
     * 				this certificate creation command. And also, if a device supports onboard key pair generation,
     * 				the device that support IEEE 802.1X shall support this command for the purpose of key pair
     * 				generation. Certificates and key pairs are identified using certificate IDs. These IDs are either
     * 				chosen by the certificate generation requester or by the device (in case that no ID value is
     * 				given).
     */
    @WebResult(name = "NvtCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "CreateCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificate")
    @WebMethod(operationName = "CreateCertificate", action = "http://www.onvif.org/ver10/device/wsdl/CreateCertificate")
    @ResponseWrapper(localName = "CreateCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateCertificateResponse")
    public org.onvif.ver10.schema.Certificate createCertificate(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String subject,
        @WebParam(name = "ValidNotBefore", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.datatype.XMLGregorianCalendar validNotBefore,
        @WebParam(name = "ValidNotAfter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.datatype.XMLGregorianCalendar validNotAfter
    );

    /**
     * This operation is used by an endpoint to get the hostname from a device. The device shall
     * 				return its hostname configurations through the GetHostname command.
     */
    @WebResult(name = "HostnameInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostname")
    @WebMethod(operationName = "GetHostname", action = "http://www.onvif.org/ver10/device/wsdl/GetHostname")
    @ResponseWrapper(localName = "GetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetHostnameResponse")
    public org.onvif.ver10.schema.HostnameInformation getHostname();

    /**
     * This operation sets the state of a relay output.
     * 				This method has been depricated with version 2.0. Refer to the DeviceIO service.
     */
    @RequestWrapper(localName = "SetRelayOutputState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputState")
    @WebMethod(operationName = "SetRelayOutputState", action = "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState")
    @ResponseWrapper(localName = "SetRelayOutputStateResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRelayOutputStateResponse")
    public void setRelayOutputState(
        @WebParam(name = "RelayOutputToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String relayOutputToken,
        @WebParam(name = "LogicalState", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.RelayLogicalState logicalState
    );

    /**
     * This operation gets a system log from the device. The exact format of the system logs is outside the scope of this standard.
     */
    @WebResult(name = "SystemLog", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemLog", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLog")
    @WebMethod(operationName = "GetSystemLog", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemLog")
    @ResponseWrapper(localName = "GetSystemLogResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemLogResponse")
    public org.onvif.ver10.schema.SystemLog getSystemLog(
        @WebParam(name = "LogType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.SystemLogType logType
    );

    /**
     * This operation gets all device server certificates (including self-signed) for the purpose of TLS
     * 				authentication and all device client certificates for the purpose of IEEE 802.1X authentication.
     * 				This command lists only the TLS server certificates and IEEE 802.1X client certificates for the
     * 				device (neither trusted CA certificates nor trusted root certificates). The certificates are
     * 				returned as binary data. A device that supports TLS shall support this command and the
     * 				certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
     * 				rules.
     */
    @WebResult(name = "NvtCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificates")
    @WebMethod(operationName = "GetCertificates", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificates")
    @ResponseWrapper(localName = "GetCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificatesResponse")
    public java.util.List<org.onvif.ver10.schema.Certificate> getCertificates();

    /**
     * This operation sets the discovery mode operation of a device. See Section 7.2 for the
     * 				definition of the different device discovery modes. The device shall support configuration of
     * 				the discovery mode setting through the SetDiscoveryMode command.
     */
    @RequestWrapper(localName = "SetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryMode")
    @WebMethod(operationName = "SetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode")
    @ResponseWrapper(localName = "SetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDiscoveryModeResponse")
    public void setDiscoveryMode(
        @WebParam(name = "DiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.DiscoveryMode discoveryMode
    );

    /**
     * This operation sets the dynamic DNS settings on a device. If the device supports dynamic
     * 				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to set the type, name
     * 				and TTL through the SetDynamicDNS command.
     */
    @RequestWrapper(localName = "SetDynamicDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNS")
    @WebMethod(operationName = "SetDynamicDNS", action = "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS")
    @ResponseWrapper(localName = "SetDynamicDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDynamicDNSResponse")
    public void setDynamicDNS(
        @WebParam(name = "Type", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.DynamicDNSType type,
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String name,
        @WebParam(name = "TTL", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.datatype.Duration ttl
    );

    /**
     * This operation gets the remote discovery mode of a device. See Section 7.4 for the definition
     * 				of remote discovery extensions. A device that supports remote discovery shall support
     * 				retrieval of the remote discovery mode setting through the GetRemoteDiscoveryMode
     * 				command.
     */
    @WebResult(name = "RemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryMode")
    @WebMethod(operationName = "GetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "GetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteDiscoveryModeResponse")
    public org.onvif.ver10.schema.DiscoveryMode getRemoteDiscoveryMode();

    /**
     * This operation gets the DNS settings from a device. The device shall return its DNS
     * 				configurations through the GetDNS command.
     */
    @WebResult(name = "DNSInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDNS", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNS")
    @WebMethod(operationName = "GetDNS", action = "http://www.onvif.org/ver10/device/wsdl/GetDNS")
    @ResponseWrapper(localName = "GetDNSResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDNSResponse")
    public org.onvif.ver10.schema.DNSInformation getDNS();

    /**
     * TLS server certificate(s) or IEEE 802.1X client certificate(s) created using the PKCS#10
     * 				certificate request command can be loaded into the device using this command (see Section
     * 				8.4.13). The certificate ID in the request shall be present. The device may sort the received
     * 				certificate(s) based on the public key and subject information in the certificate(s).
     * 				The certificate ID in the request will be the ID value the client wish to have. The device is
     * 				supposed to scan the generated key pairs present in the device to identify which is the
     * 				correspondent key pair with the loaded certificate and then make the link between the
     * 				certificate and the key pair.
     * 				A device that supports onboard key pair generation that support either TLS or IEEE 802.1X
     * 				shall support this command.
     * 				The certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
     * 				rules.
     * 				This command is applicable to any device type, although the parameter name is called for
     * 				historical reasons NVTCertificate.
     */
    @RequestWrapper(localName = "LoadCertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificates")
    @WebMethod(operationName = "LoadCertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificates")
    @ResponseWrapper(localName = "LoadCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificatesResponse")
    public void loadCertificates(
        @WebParam(name = "NVTCertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.Certificate> nvtCertificate
    );

    /**
     * This operation gets one IEEE 802.1X configuration parameter set from the device by
     * 				specifying the configuration token (Dot1XConfigurationToken).
     * 				A device that supports IEEE 802.1X shall support this command.
     * 				Regardless of whether the 802.1X method in the retrieved configuration has a password or
     * 				not, the device shall not include the Password element in the response.
     */
    @WebResult(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfiguration")
    @WebMethod(operationName = "GetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration")
    @ResponseWrapper(localName = "GetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationResponse")
    public org.onvif.ver10.schema.Dot1XConfiguration getDot1XConfiguration(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String dot1XConfigurationToken
    );

    /**
     * This operation updates the settings for one or several users on a device for authentication purposes.
     * 				The device shall support update of device users and their credentials through the SetUser command. 
     * 				Either all change requests are processed successfully or a fault message shall be returned and no change requests be processed.
     */
    @RequestWrapper(localName = "SetUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUser")
    @WebMethod(operationName = "SetUser", action = "http://www.onvif.org/ver10/device/wsdl/SetUser")
    @ResponseWrapper(localName = "SetUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetUserResponse")
    public void setUser(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.User> user
    );

    /**
     * This operation is retrieves system backup configuration file(s) from a device. The device
     * 				should support return of back up configuration file(s) through the GetSystemBackup command.
     * 				The backup is returned with reference to a name and mime-type together with binary data.
     * 				The exact format of the backup configuration files is outside the scope of this standard.
     */
    @WebResult(name = "BackupFiles", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemBackup", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackup")
    @WebMethod(operationName = "GetSystemBackup", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup")
    @ResponseWrapper(localName = "GetSystemBackupResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemBackupResponse")
    public java.util.List<org.onvif.ver10.schema.BackupFile> getSystemBackup();

    /**
     * This operation sets the NTP settings on a device. If the device supports NTP, it shall be
     * 				possible to set the NTP server settings through the SetNTP command.
     * 				A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952, 
     * 				other string shall be considered as invalid strings. 
     * 				Changes to the NTP server list will not affect the clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
     * 			
     */
    @RequestWrapper(localName = "SetNTP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTP")
    @WebMethod(operationName = "SetNTP", action = "http://www.onvif.org/ver10/device/wsdl/SetNTP")
    @ResponseWrapper(localName = "SetNTPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNTPResponse")
    public void setNTP(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP,
        @WebParam(name = "NTPManual", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.NetworkHost> ntpManual
    );

    /**
     * This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
     * 				to the command includes an HTTP URL to which the upgrade file may be uploaded. The
     * 				actual upgrade takes place as soon as the HTTP POST operation has completed. The device
     * 				should support firmware upgrade through the StartFirmwareUpgrade command. The exact
     * 				format of the firmware data is outside the scope of this specification.
     * 				Firmware upgrade over HTTP may be achieved using the following steps:
     * 				If the firmware upgrade fails because the upgrade file was invalid, the HTTP POST response
     * 				shall be “415 Unsupported Media Type”. If the firmware upgrade fails due to an error at the
     * 				device, the HTTP POST response shall be “500 Internal Server Error”.
     * 				The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”.
     */
    @RequestWrapper(localName = "StartFirmwareUpgrade", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgrade")
    @WebMethod(operationName = "StartFirmwareUpgrade", action = "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade")
    @ResponseWrapper(localName = "StartFirmwareUpgradeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.StartFirmwareUpgradeResponse")
    public void startFirmwareUpgrade(
        @WebParam(mode = WebParam.Mode.OUT, name = "UploadUri", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> uploadUri,
        @WebParam(mode = WebParam.Mode.OUT, name = "UploadDelay", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<javax.xml.datatype.Duration> uploadDelay,
        @WebParam(mode = WebParam.Mode.OUT, name = "ExpectedDownTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<javax.xml.datatype.Duration> expectedDownTime
    );

    /**
     * This operation gets the network interface configuration from a device. The device shall
     * 				support return of network interface configuration settings as defined by the NetworkInterface
     * 				type through the GetNetworkInterfaces command.
     */
    @WebResult(name = "NetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfaces")
    @WebMethod(operationName = "GetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces")
    @ResponseWrapper(localName = "GetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkInterfacesResponse")
    public java.util.List<org.onvif.ver10.schema.NetworkInterface> getNetworkInterfaces();

    /**
     * This operation deletes an IEEE 802.1X configuration parameter set from the device. Which
     * 				configuration should be deleted is specified by the 'Dot1XConfigurationToken' in the request.
     * 				A device that support IEEE 802.1X shall support this command.
     */
    @RequestWrapper(localName = "DeleteDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfiguration")
    @WebMethod(operationName = "DeleteDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration")
    @ResponseWrapper(localName = "DeleteDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteDot1XConfigurationResponse")
    public void deleteDot1XConfiguration(
        @WebParam(name = "Dot1XConfigurationToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> dot1XConfigurationToken
    );

    /**
     * Access to different services and sub-sets of services should be subject to access control. The
     * 				WS-Security framework gives the prerequisite for end-point authentication. Authorization
     * 				decisions can then be taken using an access security policy. This standard does not mandate
     * 				any particular policy description format or security policy but this is up to the device
     * 				manufacturer or system provider to choose policy and policy description format of choice.
     * 				However, an access policy (in arbitrary format) can be requested using this command. If the
     * 				device supports access policy settings based on WS-Security authentication, then the device
     * 				shall support this command.
     */
    @WebResult(name = "PolicyFile", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicy")
    @WebMethod(operationName = "GetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy")
    @ResponseWrapper(localName = "GetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetAccessPolicyResponse")
    public org.onvif.ver10.schema.BinaryData getAccessPolicy();

    /**
     * A client can ask for the device service endpoint reference address property that can be used
     * 				to derive the password equivalent for remote user operation. The device shall support the
     * 				GetEndpointReference command returning the address property of the device service
     * 				endpoint reference.
     */
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @WebResult(name = "GetEndpointReferenceResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", partName = "parameters")
    @WebMethod(operationName = "GetEndpointReference", action = "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference")
    public GetEndpointReferenceResponse getEndpointReference(
        @WebParam(partName = "parameters", name = "GetEndpointReference", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        GetEndpointReference parameters
    );

    /**
     * This operation is specific to TLS functionality. This operation sets the status (enable/disable)
     * 				of the device TLS server certificates. A device that supports TLS shall support this command.
     * 				Typically only one device server certificate is allowed to be enabled at a time.
     */
    @RequestWrapper(localName = "SetCertificatesStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatus")
    @WebMethod(operationName = "SetCertificatesStatus", action = "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus")
    @ResponseWrapper(localName = "SetCertificatesStatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetCertificatesStatusResponse")
    public void setCertificatesStatus(
        @WebParam(name = "CertificateStatus", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.CertificateStatus> certificateStatus
    );

    /**
     * This operation gets the remote DP address or addresses from a device. If the device supports
     * 				remote discovery, as specified in Section 7.4, the device shall support retrieval of the remote
     * 				DP address(es) through the GetDPAddresses command.
     */
    @WebResult(name = "DPAddress", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDPAddresses", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddresses")
    @WebMethod(operationName = "GetDPAddresses", action = "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses")
    @ResponseWrapper(localName = "GetDPAddressesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDPAddressesResponse")
    public java.util.List<org.onvif.ver10.schema.NetworkHost> getDPAddresses();

    /**
     * This operation sets the network interface configuration on a device. The device shall support
     * 				network configuration of supported network interfaces through the SetNetworkInterfaces
     * 				command.
     * 				For interoperability with a client unaware of the IEEE 802.11 extension a device shall retain
     * 				its IEEE 802.11 configuration if the IEEE 802.11 configuration element isn’t present in the
     * 				request.
     */
    @WebResult(name = "RebootNeeded", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SetNetworkInterfaces", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfaces")
    @WebMethod(operationName = "SetNetworkInterfaces", action = "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces")
    @ResponseWrapper(localName = "SetNetworkInterfacesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetNetworkInterfacesResponse")
    public boolean setNetworkInterfaces(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String interfaceToken,
        @WebParam(name = "NetworkInterface", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.NetworkInterfaceSetConfiguration networkInterface
    );

    /**
     * This operation gets the zero-configuration from a device. If the device supports dynamic IP
     * 				configuration according to [RFC3927], it shall support the return of IPv4 zero configuration
     * 				address and status through the GetZeroConfiguration command.
     * 			Devices supporting zero configuration on more than one interface shall use the extension to list the additional interface settings.
     */
    @WebResult(name = "ZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetZeroConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfiguration")
    @WebMethod(operationName = "GetZeroConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration")
    @ResponseWrapper(localName = "GetZeroConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetZeroConfigurationResponse")
    public org.onvif.ver10.schema.NetworkZeroConfiguration getZeroConfiguration();

    /**
     * This operation creates new device users and corresponding credentials on a device for authentication purposes. 
     * 				The device shall support creation of device users and their credentials through the CreateUsers
     * 				command. Either all users are created successfully or a fault message shall be returned
     * 				without creating any user.
     * 				ONVIF compliant devices are recommended to support password length of at least 28 bytes,
     * 				as clients may follow the password derivation mechanism which results in 'password
     * 				equivalent' of length 28 bytes, as described in section 3.1.2 of the ONVIF security white paper.
     */
    @RequestWrapper(localName = "CreateUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsers")
    @WebMethod(operationName = "CreateUsers", action = "http://www.onvif.org/ver10/device/wsdl/CreateUsers")
    @ResponseWrapper(localName = "CreateUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateUsersResponse")
    public void createUsers(
        @WebParam(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.User> user
    );

    /**
     * This operation adds new configurable scope parameters to a device. The scope parameters
     * 				are used in the device discovery to match a probe message. The device shall
     * 				support addition of discovery scope parameters through the AddScopes command.
     */
    @RequestWrapper(localName = "AddScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopes")
    @WebMethod(operationName = "AddScopes", action = "http://www.onvif.org/ver10/device/wsdl/AddScopes")
    @ResponseWrapper(localName = "AddScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddScopesResponse")
    public void addScopes(
        @WebParam(name = "ScopeItem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> scopeItem
    );

    /**
     * This operation reboots the device.
     */
    @WebResult(name = "Message", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SystemReboot", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemReboot")
    @WebMethod(operationName = "SystemReboot", action = "http://www.onvif.org/ver10/device/wsdl/SystemReboot")
    @ResponseWrapper(localName = "SystemRebootResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SystemRebootResponse")
    public java.lang.String systemReboot();

    /**
     * This operation gets basic device information from the device.
     */
    @RequestWrapper(localName = "GetDeviceInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformation")
    @WebMethod(operationName = "GetDeviceInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation")
    @ResponseWrapper(localName = "GetDeviceInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDeviceInformationResponse")
    public void getDeviceInformation(
        @WebParam(mode = WebParam.Mode.OUT, name = "Manufacturer", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> manufacturer,
        @WebParam(mode = WebParam.Mode.OUT, name = "Model", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> model,
        @WebParam(mode = WebParam.Mode.OUT, name = "FirmwareVersion", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> firmwareVersion,
        @WebParam(mode = WebParam.Mode.OUT, name = "SerialNumber", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> serialNumber,
        @WebParam(mode = WebParam.Mode.OUT, name = "HardwareId", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        javax.xml.ws.Holder<java.lang.String> hardwareId
    );

    /**
     * This operation controls whether the hostname is set manually or retrieved via DHCP.
     */
    @WebResult(name = "RebootNeeded", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "SetHostnameFromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCP")
    @WebMethod(operationName = "SetHostnameFromDHCP", action = "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP")
    @ResponseWrapper(localName = "SetHostnameFromDHCPResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameFromDHCPResponse")
    public boolean setHostnameFromDHCP(
        @WebParam(name = "FromDHCP", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean fromDHCP
    );

    /**
     * This operation sets the remote user. A device supporting remote user handling shall support this
     * 				operation. The user is only valid for the WS-UserToken profile or as a HTTP / RTSP user.
     * 				The password that is set shall always be the original (not derived) password.
     * 				If UseDerivedPassword is set password derivation shall be done by the device when connecting to a
     * 				remote device.The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification.
     * 				To remove the remote user SetRemoteUser should be called without the RemoteUser parameter.
     */
    @RequestWrapper(localName = "SetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUser")
    @WebMethod(operationName = "SetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser")
    @ResponseWrapper(localName = "SetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteUserResponse")
    public void setRemoteUser(
        @WebParam(name = "RemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.RemoteUser remoteUser
    );

    /**
     * This operation returns the configured remote user (if any). A device supporting remote user
     * 				handling shall support this operation. The user is only valid for the WS-UserToken profile or
     * 				as a HTTP / RTSP user.
     * 				The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification.
     */
    @WebResult(name = "RemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetRemoteUser", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUser")
    @WebMethod(operationName = "GetRemoteUser", action = "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser")
    @ResponseWrapper(localName = "GetRemoteUserResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRemoteUserResponse")
    public org.onvif.ver10.schema.RemoteUser getRemoteUser();

    /**
     * This operation newly creates IEEE 802.1X configuration parameter set of the device. The
     * 				device shall support this command if it supports IEEE 802.1X. If the device receives this
     * 				request with already existing configuration token (Dot1XConfigurationToken) specification, the
     * 				device should respond with 'ter:ReferenceToken ' error to indicate there is some configuration
     * 				conflict.
     */
    @RequestWrapper(localName = "CreateDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfiguration")
    @WebMethod(operationName = "CreateDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration")
    @ResponseWrapper(localName = "CreateDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.CreateDot1XConfigurationResponse")
    public void createDot1XConfiguration(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.Dot1XConfiguration dot1XConfiguration
    );

    /**
     * This command is used when it is necessary to load trusted CA certificates or trusted root
     * 				certificates for the purpose of verification for its counterpart i.e. client certificate verification in
     * 				TLS function or server certificate verification in IEEE 802.1X function.
     * 				A device that support either TLS or IEEE 802.1X shall support this command. As for the
     * 				supported certificate format, either DER format or PEM format is possible to be used. But a
     * 				device that support this command shall support at least DER format as supported format type.
     * 				The device may sort the received certificate(s) based on the public key and subject
     * 				information in the certificate(s). Either all CA certificates are loaded successfully or a fault
     * 				message shall be returned without loading any CA certificate.
     */
    @RequestWrapper(localName = "LoadCACertificates", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificates")
    @WebMethod(operationName = "LoadCACertificates", action = "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates")
    @ResponseWrapper(localName = "LoadCACertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCACertificatesResponse")
    public void loadCACertificates(
        @WebParam(name = "CACertificate", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.Certificate> caCertificate
    );

    /**
     * This operation sets the hostname on a device. It shall be possible to set the device hostname
     * 				configurations through the SetHostname command.
     * 				A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952, 
     * 				other string shall be considered as invalid strings. 
     * 			
     */
    @RequestWrapper(localName = "SetHostname", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostname")
    @WebMethod(operationName = "SetHostname", action = "http://www.onvif.org/ver10/device/wsdl/SetHostname")
    @ResponseWrapper(localName = "SetHostnameResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetHostnameResponse")
    public void setHostname(
        @WebParam(name = "Name", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String name
    );

    /**
     * This operation deletes an IP filter address from a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support deletion of IP filtering addresses through the RemoveIPAddressFilter command.
     */
    @RequestWrapper(localName = "RemoveIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilter")
    @WebMethod(operationName = "RemoveIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter")
    @ResponseWrapper(localName = "RemoveIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RemoveIPAddressFilterResponse")
    public void removeIPAddressFilter(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.IPAddressFilter ipAddressFilter
    );

    /**
     * This operation adds an IP filter address to a device. If the device supports device access
     * 				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
     * 				shall support adding of IP filtering addresses through the AddIPAddressFilter command.
     */
    @RequestWrapper(localName = "AddIPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilter")
    @WebMethod(operationName = "AddIPAddressFilter", action = "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter")
    @ResponseWrapper(localName = "AddIPAddressFilterResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.AddIPAddressFilterResponse")
    public void addIPAddressFilter(
        @WebParam(name = "IPAddressFilter", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.IPAddressFilter ipAddressFilter
    );

    /**
     * This operation lists the registered users and corresponding credentials on a device. The
     * 				device shall support retrieval of registered device users and their credentials for the user
     * 				token through the GetUsers command.
     */
    @WebResult(name = "User", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsers")
    @WebMethod(operationName = "GetUsers", action = "http://www.onvif.org/ver10/device/wsdl/GetUsers")
    @ResponseWrapper(localName = "GetUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetUsersResponse")
    public java.util.List<org.onvif.ver10.schema.User> getUsers();

    /**
     * This operation requests the information of a certificate specified by certificate ID. The device
     * 				should respond with its “Issuer DN”, “Subject DN”, “Key usage”, "Extended key usage”, “Key
     * 				Length”, “Version”, “Serial Number”, “Signature Algorithm” and “Validity” data as the
     * 				information of the certificate, as long as the device can retrieve such information from the
     * 				specified certificate.
     * 				A device that supports either TLS or IEEE 802.1X should support this command.
     */
    @WebResult(name = "CertificateInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetCertificateInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformation")
    @WebMethod(operationName = "GetCertificateInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation")
    @ResponseWrapper(localName = "GetCertificateInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetCertificateInformationResponse")
    public org.onvif.ver10.schema.CertificateInformation getCertificateInformation(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String certificateID
    );

    /**
     * This operation deletes users on a device. The device shall support deletion of device users and their credentials 
     * 				through the DeleteUsers command. A device may have one or more fixed users
     * 				that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a
     * 				fault message shall be returned and no users be deleted.
     */
    @RequestWrapper(localName = "DeleteUsers", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsers")
    @WebMethod(operationName = "DeleteUsers", action = "http://www.onvif.org/ver10/device/wsdl/DeleteUsers")
    @ResponseWrapper(localName = "DeleteUsersResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.DeleteUsersResponse")
    public void deleteUsers(
        @WebParam(name = "Username", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> username
    );

    /**
     * This operation sets the remote discovery mode of operation of a device. See Section 7.4 for
     * 				the definition of remote discovery remote extensions. A device that supports remote discovery
     * 				shall support configuration of the discovery mode setting through the
     * 				SetRemoteDiscoveryMode command.
     */
    @RequestWrapper(localName = "SetRemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryMode")
    @WebMethod(operationName = "SetRemoteDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode")
    @ResponseWrapper(localName = "SetRemoteDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetRemoteDiscoveryModeResponse")
    public void setRemoteDiscoveryMode(
        @WebParam(name = "RemoteDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.DiscoveryMode remoteDiscoveryMode
    );

    /**
     * This operation gets defined network protocols from a device. The device shall support the
     * 				GetNetworkProtocols command returning configured network protocols.
     */
    @WebResult(name = "NetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetNetworkProtocols", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocols")
    @WebMethod(operationName = "GetNetworkProtocols", action = "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols")
    @ResponseWrapper(localName = "GetNetworkProtocolsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetNetworkProtocolsResponse")
    public java.util.List<org.onvif.ver10.schema.NetworkProtocol> getNetworkProtocols();

    /**
     * This operation requests the scope parameters of a device. The scope parameters are used in
     * 				the device discovery to match a probe message, see Section 7. The Scope parameters are of
     * 				two different types: 
     * 				Fixed scope parameters are permanent device characteristics and cannot be removed through the device management interface. 
     * 				The scope type is indicated in the scope list returned in the get scope parameters response. A device shall support 
     * 				retrieval of discovery scope parameters through the GetScopes command. As some scope parameters are mandatory, 
     * 				the device shall return a non-empty scope list in the response.
     */
    @WebResult(name = "Scopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopes")
    @WebMethod(operationName = "GetScopes", action = "http://www.onvif.org/ver10/device/wsdl/GetScopes")
    @ResponseWrapper(localName = "GetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetScopesResponse")
    public java.util.List<org.onvif.ver10.schema.Scope> getScopes();

    /**
     * It is possible for an endpoint to request a URL that can be used to retrieve the complete
     * 				schema and WSDL definitions of a device. The command gives in return a URL entry point
     * 				where all the necessary product specific WSDL and schema definitions can be retrieved. The
     * 				device shall provide a URL for WSDL and schema download through the GetWsdlUrl command.
     */
    @WebResult(name = "WsdlUrl", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetWsdlUrl", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrl")
    @WebMethod(operationName = "GetWsdlUrl", action = "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl")
    @ResponseWrapper(localName = "GetWsdlUrlResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetWsdlUrlResponse")
    public java.lang.String getWsdlUrl();

    /**
     * This operation gets a list of all available relay outputs and their settings.
     * 				This method has been depricated with version 2.0. Refer to the DeviceIO service.
     */
    @WebResult(name = "RelayOutputs", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetRelayOutputs", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputs")
    @WebMethod(operationName = "GetRelayOutputs", action = "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs")
    @ResponseWrapper(localName = "GetRelayOutputsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetRelayOutputsResponse")
    public java.util.List<org.onvif.ver10.schema.RelayOutput> getRelayOutputs();

    /**
     * This operation gets the discovery mode of a device. See Section 7.2 for the definition of the
     * 				different device discovery modes. The device shall support retrieval of the discovery mode
     * 				setting through the GetDiscoveryMode command.
     */
    @WebResult(name = "DiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDiscoveryMode", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryMode")
    @WebMethod(operationName = "GetDiscoveryMode", action = "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode")
    @ResponseWrapper(localName = "GetDiscoveryModeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDiscoveryModeResponse")
    public org.onvif.ver10.schema.DiscoveryMode getDiscoveryMode();

    /**
     * While the CreateDot1XConfiguration command is trying to create a new configuration
     * 				parameter set, this operation modifies existing IEEE 802.1X configuration parameter set of
     * 				the device. A device that support IEEE 802.1X shall support this command.
     */
    @RequestWrapper(localName = "SetDot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfiguration")
    @WebMethod(operationName = "SetDot1XConfiguration", action = "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration")
    @ResponseWrapper(localName = "SetDot1XConfigurationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetDot1XConfigurationResponse")
    public void setDot1XConfiguration(
        @WebParam(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.Dot1XConfiguration dot1XConfiguration
    );

    /**
     * Returns the capabilities of the device service. The result is returned in a typed answer.
     */
    @WebResult(name = "Capabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetServiceCapabilities", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilities")
    @WebMethod(operationName = "GetServiceCapabilities", action = "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities")
    @ResponseWrapper(localName = "GetServiceCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetServiceCapabilitiesResponse")
    public org.onvif.ver10.device.wsdl.DeviceServiceCapabilities getServiceCapabilities();

    /**
     * There might be some cases that a Certificate Authority or some other equivalent creates a
     * 				certificate without having PKCS#10 certificate signing request. In such cases, the certificate
     * 				will be bundled in conjunction with its private key. This command will be used for such use
     * 				case scenarios. The certificate ID in the request is optionally set to the ID value the client
     * 				wish to have. If the certificate ID is not specified in the request, device can choose the ID
     * 				accordingly.
     * 				This operation imports a private/public key pair into the device.
     * 				The certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
     * 				rules.
     * 				A device that does not support onboard key pair generation and support either TLS or IEEE
     * 				802.1X using client certificate shall support this command. A device that support onboard key
     * 				pair generation MAY support this command. The security policy of a device that supports this
     * 				operation should make sure that the private key is sufficiently protected.
     */
    @RequestWrapper(localName = "LoadCertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKey")
    @WebMethod(operationName = "LoadCertificateWithPrivateKey", action = "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey")
    @ResponseWrapper(localName = "LoadCertificateWithPrivateKeyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.LoadCertificateWithPrivateKeyResponse")
    public void loadCertificateWithPrivateKey(
        @WebParam(name = "CertificateWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.CertificateWithPrivateKey> certificateWithPrivateKey
    );

    /**
     * This operation upgrades a device firmware version. After a successful upgrade the response
     * 				message is sent before the device reboots. The device should support firmware upgrade
     * 				through the UpgradeSystemFirmware command. The exact format of the firmware data is
     * 				outside the scope of this standard.
     */
    @WebResult(name = "Message", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "UpgradeSystemFirmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmware")
    @WebMethod(operationName = "UpgradeSystemFirmware", action = "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware")
    @ResponseWrapper(localName = "UpgradeSystemFirmwareResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.UpgradeSystemFirmwareResponse")
    public java.lang.String upgradeSystemFirmware(
        @WebParam(name = "Firmware", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.AttachmentData firmware
    );

    /**
     * This operation sets the device system date and time. The device shall support the
     * 				configuration of the daylight saving setting and of the manual system date and time (if
     * 				applicable) or indication of NTP time (if applicable) through the SetSystemDateAndTime
     * 				command. 
     * 				If system time and date are set manually, the client shall include UTCDateTime in the request.
     * 				A TimeZone token which is not formed according to the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.
     * 				The DayLightSavings flag should be set to true to activate any DST settings of the TimeZone string. 
     * 				Clear the DayLightSavings flag if the DST portion of the TimeZone settings should be ignored.
     * 			
     */
    @RequestWrapper(localName = "SetSystemDateAndTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTime")
    @WebMethod(operationName = "SetSystemDateAndTime", action = "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime")
    @ResponseWrapper(localName = "SetSystemDateAndTimeResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetSystemDateAndTimeResponse")
    public void setSystemDateAndTime(
        @WebParam(name = "DateTimeType", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.SetDateTimeType dateTimeType,
        @WebParam(name = "DaylightSavings", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        boolean daylightSavings,
        @WebParam(name = "TimeZone", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.TimeZone timeZone,
        @WebParam(name = "UTCDateTime", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.DateTime utcDateTime
    );

    /**
     * This operation returns the status of a wireless network interface. The device shall support this
     * 				command.
     */
    @WebResult(name = "Status", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDot11Status", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11Status")
    @WebMethod(operationName = "GetDot11Status", action = "http://www.onvif.org/ver10/device/wsdl/GetDot11Status")
    @ResponseWrapper(localName = "GetDot11StatusResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot11StatusResponse")
    public org.onvif.ver10.schema.Dot11Status getDot11Status(
        @WebParam(name = "InterfaceToken", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String interfaceToken
    );

    /**
     * This command sets the device access security policy (for more details on the access security
     * 				policy see the Get command). If the device supports access policy settings
     * 				based on WS-Security authentication, then the device shall support this command.
     */
    @RequestWrapper(localName = "SetAccessPolicy", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicy")
    @WebMethod(operationName = "SetAccessPolicy", action = "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy")
    @ResponseWrapper(localName = "SetAccessPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetAccessPolicyResponse")
    public void setAccessPolicy(
        @WebParam(name = "PolicyFile", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.BinaryData policyFile
    );

    /**
     * This operation gets all the existing IEEE 802.1X configuration parameter sets from the device.
     * 				The device shall respond with all the IEEE 802.1X configurations so that the client can get to
     * 				know how many IEEE 802.1X configurations are existing and how they are configured.
     * 				A device that support IEEE 802.1X shall support this command.
     * 				Regardless of whether the 802.1X method in the retrieved configuration has a password or
     * 				not, the device shall not include the Password element in the response.
     */
    @WebResult(name = "Dot1XConfiguration", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetDot1XConfigurations", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurations")
    @WebMethod(operationName = "GetDot1XConfigurations", action = "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations")
    @ResponseWrapper(localName = "GetDot1XConfigurationsResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetDot1XConfigurationsResponse")
    public java.util.List<org.onvif.ver10.schema.Dot1XConfiguration> getDot1XConfigurations();

    /**
     * This operation requests a PKCS #10 certificate signature request from the device. The
     * 				returned information field shall be either formatted exactly as specified in [PKCS#10] or PEM
     * 				encoded [PKCS#10] format. In order for this command to work, the device must already have
     * 				a private/public key pair. This key pair should be referred by CertificateID as specified in the
     * 				input parameter description. This CertificateID refers to the key pair generated using
     * 				CreateCertificate command.
     * 				A device that support onboard key pair generation that supports either TLS or IEEE 802.1X
     * 				using client certificate shall support this command.
     */
    @WebResult(name = "Pkcs10Request", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetPkcs10Request", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10Request")
    @WebMethod(operationName = "GetPkcs10Request", action = "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request")
    @ResponseWrapper(localName = "GetPkcs10RequestResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetPkcs10RequestResponse")
    public org.onvif.ver10.schema.BinaryData getPkcs10Request(
        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String certificateID,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.lang.String subject,
        @WebParam(name = "Attributes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        org.onvif.ver10.schema.BinaryData attributes
    );

    /**
     * This operation sets the scope parameters of a device. The scope parameters are used in the
     * 				device discovery to match a probe message.
     * 				This operation replaces all existing configurable scope parameters (not fixed parameters). If
     * 				this shall be avoided, one should use the scope add command instead. The device shall
     * 				support configuration of discovery scope parameters through the SetScopes command.
     */
    @RequestWrapper(localName = "SetScopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopes")
    @WebMethod(operationName = "SetScopes", action = "http://www.onvif.org/ver10/device/wsdl/SetScopes")
    @ResponseWrapper(localName = "SetScopesResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.SetScopesResponse")
    public void setScopes(
        @WebParam(name = "Scopes", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<java.lang.String> scopes
    );

    /**
     * This operation gets arbitary device diagnostics information from the device.
     */
    @WebResult(name = "SupportInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
    @RequestWrapper(localName = "GetSystemSupportInformation", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformation")
    @WebMethod(operationName = "GetSystemSupportInformation", action = "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation")
    @ResponseWrapper(localName = "GetSystemSupportInformationResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.GetSystemSupportInformationResponse")
    public org.onvif.ver10.schema.SupportInformation getSystemSupportInformation();

    /**
     * This operation restores the system backup configuration files(s) previously retrieved from a
     * 				device. The device should support restore of backup configuration file(s) through the
     * 				RestoreSystem command. The exact format of the backup configuration file(s) is outside the
     * 				scope of this standard. If the command is supported, it shall accept backup files returned by
     * 				the GetSystemBackup command.
     */
    @RequestWrapper(localName = "RestoreSystem", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystem")
    @WebMethod(operationName = "RestoreSystem", action = "http://www.onvif.org/ver10/device/wsdl/RestoreSystem")
    @ResponseWrapper(localName = "RestoreSystemResponse", targetNamespace = "http://www.onvif.org/ver10/device/wsdl", className = "org.onvif.ver10.device.wsdl.RestoreSystemResponse")
    public void restoreSystem(
        @WebParam(name = "BackupFiles", targetNamespace = "http://www.onvif.org/ver10/device/wsdl")
        java.util.List<org.onvif.ver10.schema.BackupFile> backupFiles
    );
}
